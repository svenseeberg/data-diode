#!/usr/bin/env python3
"""
Download OpenBSD packages including dependencies
"""

import os
import re
import tarfile
import urllib.request
import configparser
import argparse
from pathlib import Path


PARSER = argparse.ArgumentParser(description='Mirror OpenBSD packages with dependencies. ' +
                                 'This script keeps track of already downloaded packages.')
PARSER.add_argument('--directory', type=str, nargs='?', required=False, default="./",
                    help='directory from which to send files')
PARSER.add_argument('--config', type=str, nargs='?', required=False,
                    default=f"{Path.home()}/.openbsd-mirror.ini",
                    help='Path to configuration file')


def package_path(stable, os_version, arch, package_filename):
    """
    Build path to package file in local file system
    """
    directory = os.path.join(ARGS.directory, "pub/OpenBSD/", os_version, packages_dir(stable), arch)
    Path(directory).mkdir(parents=True, exist_ok=True)
    return os.path.join(directory, package_filename)

def packages_dir(stable):
    """
    Return stable or normal packages dir
    """
    if stable:
        return "packages-stable"
    return "packages"

def download_package(arch, os_version, package_filename, stable):
    """
    Download package and store in file
    """
    target_path = package_path(stable, os_version, arch, package_filename)
    if not os.path.isfile(target_path):
        url = (
            f"https://cdn.openbsd.org/pub/OpenBSD/{os_version}/"
            f"{packages_dir(stable)}/{arch}/{package_filename}"
        )
        print("Downloading " + url)
        urllib.request.urlretrieve(url, filename=target_path)
    return get_pkg_dependencies(target_path)

def get_pkg_dependencies(pkg_file):
    """
    Get "@depends" lines from +CONTENTS file of pkg archive
    """
    pkg_file = tarfile.open(pkg_file, 'r:gz')
    info_file = pkg_file.extractfile("+CONTENTS")
    deps = [line for line in info_file.read().decode("utf-8").split("\n") if "@depend" in line]
    info_file.close()
    result = []
    for dep in deps:
        search = re.search(r"(.*)-([0-9\.]*)", dep.split(':')[2])
        pkg = search.group(1)
        version = search.group(2)
        result.append((pkg, version))
    return result

def read_config():
    """
    Read ini config file. Sections define architectures.
    Config keys are package names, the values downloaded version numbers.
    """
    config = configparser.ConfigParser()
    config.read(ARGS.config)
    return config

def write_config(config):
    """
    Write with updated version strings
    """
    with open(ARGS.config, 'w', encoding="utf-8") as configfile:
        config.write(configfile)

def get_pkg_list(arch, version, stable=False):
    """
    Get list of packages and filter package names
    """
    if stable:
        stable = "-stable"
    else:
        stable = ""
    url = f"https://cdn.openbsd.org/pub/OpenBSD/{version}/packages{stable}/{arch}/"
    req = urllib.request.urlopen(url).read().decode('utf-8')
    lines = req.split("\n")
    pkgs = set()
    for line in lines:
        search = re.search(r"<a href=\"(.*\.tgz)\".*", line)
        if search:
            pkgs.add(search.group(1))
    return pkgs

# pylint: disable=too-many-arguments
def recursive_download(avl_pkgs, avl_pkgs_stbl, os_version, arch, pkg, cur_pkg_version=None):
    """
    Download a package, get dependencies and recursively download
    """
    stable, pkg_filename = get_pkg_download_path(avl_pkgs, avl_pkgs_stbl, pkg,
                                                 cur_pkg_version)
    if pkg_filename is None:
        raise ValueError(f"Could not find file for package {pkg}")
    if cur_pkg_version is None:
        cur_pkg_version = get_pkg_version(pkg, pkg_filename)
    old_pkg_version = get_existing_version(arch, pkg)
    if old_pkg_version is None or cur_pkg_version > old_pkg_version:
        dependencies = download_package(arch, os_version, pkg_filename, stable)
        for dep in dependencies:
            dep_version = recursive_download(avl_pkgs, avl_pkgs_stbl, os_version, arch,
                                             dep[0], dep[1])
            CONFIG.set(f"{arch}/dependencies", dep[0], dep_version)
    return cur_pkg_version

def get_existing_version(arch, pkg):
    """
    Get previously downloaded version of package
    """
    dep_section = f"{arch}/dependencies"
    return CONFIG.get(arch, pkg, fallback=CONFIG.get(dep_section, pkg, fallback=None))

def get_pkg_version(package, pkg_filename):
    """
    Extract version from filename
    """
    return re.search(r"({}-)([0-9\.plv\-]*)(\.tgz)$".format(package), pkg_filename).group(2)

def get_pkg_download_path(avl_pkgs, avl_pkgs_stbl, package, version=None):
    """
    Find full package name including version
    """
    if version is not None:
        package = "-".join([package, version])
    package = package.replace("+", r"\+").rstrip("-").replace(".tgz", "")
    regex = r"{}[0-9\.plv\-]*\.tgz$".format(package.lower())
    for stbl_pkg in avl_pkgs_stbl:
        if re.match(regex, stbl_pkg.lower()):
            return True, stbl_pkg
    for stbl_pkg in avl_pkgs:
        if re.match(regex, stbl_pkg.lower()):
            return False, stbl_pkg
    return None, None

def main():
    """
    Main function
    """
    os_version = CONFIG['OpenBSD']["version"]
    for arch in [s for s in CONFIG.sections() if s != "OpenBSD" and "/dependencies" not in s]:
        dep_sec = f"{arch}/dependencies"
        if dep_sec not in CONFIG.sections():
            CONFIG.add_section(dep_sec)
        avl_pkgs = get_pkg_list(arch, os_version, stable=False)
        try:
            avl_pkgs_stbl = get_pkg_list(arch, os_version, stable=True)
        except urllib.error.HTTPError:
            avl_pkgs_stbl = set()
        # Get new packages including dependencies
        for package in CONFIG[arch]:
            pkg_version = recursive_download(avl_pkgs, avl_pkgs_stbl, os_version, arch, package)
            CONFIG.set(arch, package, pkg_version)
        # Update all stored dependencies
        for package in CONFIG[dep_sec]:
            version = CONFIG.get(dep_sec, package)
            pkg_version = recursive_download(avl_pkgs, avl_pkgs_stbl, os_version,
                                             arch, package, version)
            CONFIG.set(dep_sec, package, pkg_version)

ARGS = PARSER.parse_args()
CONFIG = read_config()
if __name__ == '__main__':
    main()
