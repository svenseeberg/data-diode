#!/usr/bin/env python3
"""
Receive files through unidirectional serial device
"""
# pylint: disable=W0603

import argparse
import hashlib
import logging
import os
import queue
import socket
import sys
import time
import threading
import traceback

from pathlib import Path
from logging import handlers

DIODE_LOGGER = logging.getLogger('DIODE')
DIODE_LOGGER.setLevel(logging.INFO)
SYSLOG_FORMATTER = logging.Formatter('%(name)s %(levelname)s: %(message)s')
STDERR_FORMATTER = logging.Formatter('%(asctime)s %(levelname)s: %(message)s')
SYSLOG_HANDLER = handlers.SysLogHandler(address='/dev/log')
SYSLOG_HANDLER.setFormatter(SYSLOG_FORMATTER)
STDERR_HANDLER = logging.StreamHandler(sys.stderr)
STDERR_HANDLER.setLevel(logging.DEBUG)
STDERR_HANDLER.setFormatter(STDERR_FORMATTER)
DIODE_LOGGER.addHandler(SYSLOG_HANDLER)
DIODE_LOGGER.addHandler(STDERR_HANDLER)

PARSER = argparse.ArgumentParser(description='Serial device options')
PARSER.add_argument('--bind-subnet', type=str, nargs='?', default="10.125.125.255",
                    help='Bind to broadcast address / subnet')
PARSER.add_argument('--bind-port', type=int, nargs='?', default=5005,
                    help='Bind port')
PARSER.add_argument('--directory', type=str, nargs='?', required=True,
                    help='directory from which to send files')
PARSER.add_argument('--arduino', type=str, nargs='?', required=False,
                    help='serial device, i.e. /dev/cuaU1')
PARSER.add_argument('--udp-target-port', type=int, nargs='?', required=False,
                    help='Target port for UDP packet forwarding. This enables forwarding of UDP packets.')
PARSER.add_argument('--udp-target-ip', type=str, nargs='?', required=False, default="127.0.0.1",
                    help='Target ip for UDP packet forwarding.')
ARGS = PARSER.parse_args()

# System setup based on arguments
BIND_PORT = int(ARGS.bind_port)
BIND_IP = ARGS.bind_subnet
OUTPUT_DIR = ARGS.directory

# Static variables
PKG_TYPE_START = 0
PKG_TYPE_DATA = 1
PKG_TYPE_END = 2
PKG_TYPE_UDP = 4
# Transfer state
FILES_TRANSFERRED = []
FILES_FAILED = []
TOTAL_TRANSFERRED = 0

SOCKET_PKG_QUEUE = queue.Queue()
FORWARD_UDP_QUEUE = queue.Queue()

class ReceiveState:
    """
    Track the progress of the current transfer
    """
    def __init__(self):
        self.bytes_transferred = 0
        self.file_path = None
        self.file_size = 0
        self.known_chunks = set()
        self.path_hash = None
        self.prev_chunk = -1
        self.missed_chunks = set()
        self.buffer = {}
        self.failed = False

    def add_bytes(self, chunk_kbytes: int):
        """
        Add transferred bytes
        """
        global TOTAL_TRANSFERRED
        self.bytes_transferred += chunk_kbytes
        TOTAL_TRANSFERRED += chunk_kbytes

    def new_transfer(self, file_path: str, path_hash: str, file_size: int):
        """
        Store data for new transfer
        """
        self.file_path = file_path
        self.path_hash = path_hash
        self.file_size = file_size

    def buffer_packet(self, packet: dict):
        """
        Buffer packets, in total about 10M of data. That should ensure
        that only partially received 10M files can be completed in the second
        run.
        """
        if len(self.buffer) > 1000:
            raise ValueError(
                f"Buffer too long, probably missed packet. Last chunk: {self.prev_chunk}"
                f", next buffered package: {sorted(self.buffer.items())[0][0]}",
            )
        self.buffer[packet['count']] = packet

    def get_buffered_packets(self):
        """
        Get currently buffered packets as long as no packet is missing.
        """
        packets = sorted(self.buffer.items())
        prev_chunk = self.prev_chunk
        for count, packet in packets:
            if count == prev_chunk + 1:
                prev_chunk += 1
                del self.buffer[count]
                yield packet
            else:
                break

class Display:
    """
    Class for handling the LCD display attached to the Arduino.
    """
    def __init__(self, serial_interface: str) -> None:
        import serial  # pylint: disable=import-outside-toplevel
        self.arduino = serial.Serial(serial_interface, 38400, timeout=1)
        self.reset()
        self.update()

    def reset(self) -> None:
        """
        blank all characters on screen
        """
        self.arduino.write(bytes('               \n', 'ascii'))
        self.arduino.write(bytes('               \n', 'ascii'))

    def update(self) -> None:
        """
        Send info to Arduino to update LCD
        """
        data_mb = round(TOTAL_TRANSFERRED / 1024 / 1024, 1)
        if RECEIVE_STATE.file_path is not None:
            state = "Rx   "
            if not RECEIVE_STATE.file_size:
                progress = 100
            else:
                progress = int(RECEIVE_STATE.bytes_transferred / RECEIVE_STATE.file_size * 100)
            progress_str = f" {progress:>3}%"
        else:
            state = "Wait "
            progress_str = "     "
        line1 = state + str(len(FILES_TRANSFERRED)) + "F " + str(len(FILES_FAILED)) + "E"
        line2 =  str(data_mb) + "MB" + progress_str
        self.arduino.write(bytes(line1+'\n', 'ascii'))
        self.arduino.write(bytes(line2+'\n', 'ascii'))

def write_chunk_to_file(path: str, packet: dict) -> None:
    """
    Write validated chunk to file
    """
    data = bytes.fromhex(packet['data'])
    full_path = os.path.join(OUTPUT_DIR, path)
    os.makedirs(os.path.dirname(full_path), exist_ok=True)
    with open(full_path, 'ab') as f:
        f.write(data)
        RECEIVE_STATE.add_bytes(len(data))

def new_file(path: str, size: int, path_hash: str) -> None:
    """
    Log messages for new file. Delete file if exists.
    """
    if RECEIVE_STATE.file_path == path:
        return
    if RECEIVE_STATE.file_path is not None:
        DIODE_LOGGER.error("Unfinished previous transfer of %s failed", RECEIVE_STATE.file_path)
        reset_transfer(success=False)
    RECEIVE_STATE.new_transfer(path, path_hash, size)
    DIODE_LOGGER.info("Receiving file %s", path)
    try:
        os.remove(os.path.join(OUTPUT_DIR, path))
    except OSError:
        pass
    if DISPLAY is not None:
        DISPLAY.update()

def is_file_valid(packet: dict) -> bool:
    """
    Check if the final file is in the expected state.
    """
    success = True
    filesize = os.path.getsize(os.path.join(OUTPUT_DIR, RECEIVE_STATE.file_path))
    if len(RECEIVE_STATE.known_chunks) != packet['count']:
        DIODE_LOGGER.error(
            "Missing chunks for %s. Received %s but expected %s.",
            packet['data'],
            len(RECEIVE_STATE.known_chunks),
            packet['count']
        )
        success = False
    if RECEIVE_STATE.file_size != filesize:
        DIODE_LOGGER.error(
            "Filesize mismatch for %s. Expected %i but wrote %i bytes.",
            packet['data'],
            RECEIVE_STATE.file_size,
            filesize
        )
        success = False
    return success

def finish_file(packet: dict) -> None:
    """
    Validate that file has been completed and append to finished files
    """
    failed_path = os.path.join(OUTPUT_DIR, f"{RECEIVE_STATE.file_path}.failed")
    if is_file_valid(packet):
        DIODE_LOGGER.info("Finished receiving %s", packet['data'])
        if os.path.exists(failed_path):
            os.remove(failed_path)
        reset_transfer(success=True)
    else:
        os.remove(os.path.join(OUTPUT_DIR, RECEIVE_STATE.file_path))
        Path(failed_path).touch()
        reset_transfer(success=False)

def reset_transfer(success: bool = True) -> None:
    """
    Reset global variables related to transfer state.
    """
    global RECEIVE_STATE
    if success:
        FILES_TRANSFERRED.append(RECEIVE_STATE.file_path)
    else:
        FILES_FAILED.append(RECEIVE_STATE.file_path)
    RECEIVE_STATE = ReceiveState()
    if DISPLAY is not None:
        DISPLAY.update()

def worker() -> None:
    """
    Listen for incoming UDP packets, validate & write chunks
    """
    while True:
        try:
            packet = decode_package(SOCKET_PKG_QUEUE.get())
            if packet["type"] == PKG_TYPE_DATA and RECEIVE_STATE.file_path:
                process_chunk(packet)
            elif packet["type"] == PKG_TYPE_START:
                new_file(packet["data"], packet["count"], packet["path_hash"])
            elif packet["type"] == PKG_TYPE_END and RECEIVE_STATE.file_path:
                finish_file(packet)
            elif packet["type"] == PKG_TYPE_UDP and ARGS.udp_target_port:
                FORWARD_UDP_QUEUE.put(bytes.fromhex(packet['data']))
            elif RECEIVE_STATE.file_path:
                raise ValueError("Unknown packet type")
        except Exception as e:  # pylint: disable=broad-exception-caught
            DIODE_LOGGER.error(e)
            print(traceback.format_exc())
            reset_transfer(success=False)

def listen() -> None:
    """
    Fetch packages from socket queue and throw into worker threading queue
    """
    while True:
        data, _ = sock.recvfrom(4096)
        SOCKET_PKG_QUEUE.put(data)

def is_chunk_valid(packet: dict) -> bool:
    """
    Check if chunk is valid
    """
    result = True
    chunk_bytes = bytes.fromhex(packet['data'])
    if packet['path_hash'] != RECEIVE_STATE.path_hash:
        DIODE_LOGGER.warning("Path does not match in %s", packet['count'])
        result = False
    if hashlib.md5(chunk_bytes).hexdigest() != packet['data_hash']:
        DIODE_LOGGER.warning("Hash does not match in %s", packet['count'])
        result = False
    if packet['count'] in RECEIVE_STATE.known_chunks:
        result = False
    return result

def decode_package(package: bytes):
    """
    Decode package with fixed length substrings. The input data is not validated. The hases must have a length
    of 32 chars, the count/filesize must not bef longer than 10 chars. The type is only one char.

    package format:
        package_type                              = string[0:1]
        count(data/end pkg) / filesize(start pkg) = string[1:11]
        path_hash                                 = string[11:43]
        data_hash                                 = string[43:75]
        data(data pkg) / path(start/end pkg)      = string[75:]
    """
    package_string = package.decode()
    data = {
        "type": int(package_string[0:1]),
        "count": int(package_string[1:11]),
        "path_hash": package_string[11:43],
        "data_hash": package_string[43:75],
        "data": package_string[75:]
    }
    return data

def process_chunk(packet: dict) -> None:
    """
    Process data paket
    """
    if is_chunk_valid(packet) and not RECEIVE_STATE.failed:
        try:
            RECEIVE_STATE.buffer_packet(packet)
        except ValueError as exc:
            DIODE_LOGGER.error("Aborting transfer due to %s", exc)
            RECEIVE_STATE.failed = True
    for buffered_packet in RECEIVE_STATE.get_buffered_packets():
        if buffered_packet['count'] != RECEIVE_STATE.prev_chunk + 1:
            DIODE_LOGGER.error("Wrong packet order.")
        write_chunk_to_file(RECEIVE_STATE.file_path, buffered_packet)
        RECEIVE_STATE.known_chunks.add(buffered_packet['count'])
        RECEIVE_STATE.prev_chunk = buffered_packet['count']
        if DISPLAY is not None and buffered_packet['count'] % 1000 == 0:
            DISPLAY.update()

def forward_udp_packets():
    """
    Forward the content of a UDP packet through the diode.
    """
    udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    DIODE_LOGGER.info("Forwarding UDP packets to %s:%i", ARGS.udp_target_ip, ARGS.udp_target_port)
    while True:
        if FORWARD_UDP_QUEUE.empty():
            time.sleep(0.01)
        else:
            data_packet = FORWARD_UDP_QUEUE.get()
            udp_sock.sendto(data_packet, (ARGS.udp_target_ip, ARGS.udp_target_port))

RECEIVE_STATE = ReceiveState()

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
sock.bind((BIND_IP, BIND_PORT))

DISPLAY = Display(ARGS.arduino) if ARGS.arduino else None

if __name__ == "__main__":
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    threading.Thread(target=listen).start()
    threading.Thread(target=worker).start()
    if ARGS.udp_target_port:
        threading.Thread(target=forward_udp_packets).start()
