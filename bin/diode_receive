#!/usr/bin/env python3
"""
Receive files through unidirectional serial device
"""
# pylint: disable=W0603

import argparse
import hashlib
import json
import logging
import os
import socket
import sys

from logging import handlers

DIODE_LOGGER = logging.getLogger('DIODE')
DIODE_LOGGER.setLevel(logging.INFO)
SYSLOG_FORMATTER = logging.Formatter('%(name)s %(levelname)s: %(message)s')
STDERR_FORMATTER = logging.Formatter('%(asctime)s %(levelname)s: %(message)s')
SYSLOG_HANDLER = handlers.SysLogHandler(address='/dev/log')
SYSLOG_HANDLER.setFormatter(SYSLOG_FORMATTER)
STDERR_HANDLER = logging.StreamHandler(sys.stderr)
STDERR_HANDLER.setLevel(logging.DEBUG)
STDERR_HANDLER.setFormatter(STDERR_FORMATTER)
DIODE_LOGGER.addHandler(SYSLOG_HANDLER)
DIODE_LOGGER.addHandler(STDERR_HANDLER)

PARSER = argparse.ArgumentParser(description='Serial device options')
PARSER.add_argument('--bind-subnet', type=str, nargs='?', default="10.125.125.255",
                    help='Bind to broadcast address / subnet')
PARSER.add_argument('--bind-port', type=int, nargs='?', default=5005,
                    help='Bind port')
PARSER.add_argument('--directory', type=str, nargs='?', required=True,
                    help='directory from which to send files')
PARSER.add_argument('--arduino', type=str, nargs='?', required=False,
                    help='serial device, i.e. /dev/cuaU1')
ARGS = PARSER.parse_args()

# System setup based on arguments
BIND_PORT = int(ARGS.bind_port)
BIND_IP = ARGS.bind_subnet
OUTPUT_DIR = ARGS.directory

# Transfer state
FILES_TRANSFERRED = []
FILES_FAILED = []
KB_TRANSFERRED = 0
CUR_FILE = None
CUR_FILE_SIZE = 0
KNOWN_CHUNKS = set()
CUR_PATH_HASH = None

# Static variables
PKG_TYPE_START = 0
PKG_TYPE_DATA = 1
PKG_TYPE_END = 2

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
sock.bind((BIND_IP, BIND_PORT))

class Display:
    """
    Class for handling the LCD display attached to the Arduino.
    """
    def __init__(self, serial_interface: str) -> None:
        import serial  # pylint: disable=import-outside-toplevel
        self.arduino = serial.Serial(serial_interface, 38400, timeout=1)
        self.reset()
        self.update()

    def reset(self) -> None:
        """
        blank all characters on screen
        """
        self.arduino.write(bytes('               \n', 'ascii'))
        self.arduino.write(bytes('               \n', 'ascii'))

    def update(self) -> None:
        """
        Send info to Arduino to update LCD
        """
        if CUR_FILE is not None:
            state = "Rx   "
            progress = int(progress)
        else:
            state = "Wait "
        data_mb = int(KB_TRANSFERRED/1024)
        line1 = state + str(len(FILES_TRANSFERRED))+"F " + str(len(FILES_FAILED))+"E"
        line2 = str(data_mb) + "MB" + (" " + str(progress) + "%" if CUR_FILE is not None else "")
        self.arduino.write(bytes(line1+'\n', 'ascii'))
        self.arduino.write(bytes(line2+'\n', 'ascii'))

def write_file_from_chunks(path: str, chunks: list) -> None:
    """
    Write validated chunks to file
    """
    global KB_TRANSFERRED
    full_path = os.path.join(OUTPUT_DIR, path)
    os.makedirs(os.path.dirname(full_path), exist_ok=True)
    with open(full_path, 'ab') as f:
        for chunk in chunks:
            KB_TRANSFERRED = KB_TRANSFERRED + len(chunks)
            f.write(chunk)

def new_file(path: str, size: int, path_hash: str) -> None:
    """
    Log messages for new file. Delete file if exists.
    """
    global CUR_FILE
    global CUR_FILE_SIZE
    global CUR_PATH_HASH
    if CUR_FILE is not None:
        DIODE_LOGGER.error("Unfinished previous transfer of %s failed", CUR_FILE)
        reset_transfer(success=False)
    CUR_FILE = path
    CUR_PATH_HASH = path_hash
    CUR_FILE_SIZE = size
    DIODE_LOGGER.info("Receiving file %s", path)
    try:
        os.remove(os.path.join(OUTPUT_DIR, path))
    except OSError:
        pass
    if DISPLAY is not None:
        DISPLAY.update()

def finish_file(packet: dict) -> None:
    """
    Validate that file has been completed and append to finished files
    """
    if len(KNOWN_CHUNKS) != packet['c']:
        DIODE_LOGGER.error("Missing chunks for %s", packet['p'])
        os.remove(os.path.join(OUTPUT_DIR, CUR_FILE))
        reset_transfer(success=False)
    else:
        DIODE_LOGGER.info("Finished receiving %s", packet['p'])
        reset_transfer(success=True)

def reset_transfer(success: bool = True) -> None:
    """
    Reset global variables related to transfer state.
    """
    global CUR_FILE
    global KNOWN_CHUNKS
    if success:
        FILES_TRANSFERRED.append(CUR_FILE)
    else:
        FILES_FAILED.append(CUR_FILE)
    CUR_FILE = None
    KNOWN_CHUNKS = set()
    if DISPLAY is not None:
        DISPLAY.update()

def listen() -> None:
    """
    Listen for incoming UDP packets, validate & write chunks
    """
    while True:
        try:
            data, _ = sock.recvfrom(4096)
            packet = json.loads(data.decode())
            if packet["t"] == PKG_TYPE_DATA:
                process_chunk(packet)
            elif packet["t"] == PKG_TYPE_START:
                new_file(packet["p"], packet["s"], packet["h"])
            elif packet["t"] == PKG_TYPE_END:
                finish_file(packet)
            else:
                raise ValueError("Unknown packet type")
        except Exception as e:  # pylint: disable=broad-exception-caught
            DIODE_LOGGER.error(e)
            reset_transfer(success=False)

def chunk_is_valid(packet: dict, chunk_bytes: bytes) -> bool:
    """
    Check if chunk is valid
    """
    return (
        packet['p'] == CUR_PATH_HASH and
        packet['c'] not in KNOWN_CHUNKS and
        hashlib.md5(chunk_bytes).hexdigest() == packet['h']
    )

def process_chunk(packet: dict) -> None:
    """
    Process data paket
    """
    chunk_bytes = bytes.fromhex(packet['d'])
    if chunk_is_valid(packet, chunk_bytes):
        write_file_from_chunks(CUR_FILE, [chunk_bytes])
        KNOWN_CHUNKS.add(packet['c'])
        if DISPLAY is not None and packet['c'] % 1000 == 0:
            DISPLAY.update()

DISPLAY = Display(ARGS.arduino) if ARGS.arduino else None

if __name__ == "__main__":
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    listen()
